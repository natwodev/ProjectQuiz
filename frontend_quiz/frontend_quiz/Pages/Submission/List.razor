@page "/submissions"
@using frontend_quiz.DTOs
@using frontend_quiz.Services
@inject ExamService ExamService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject SubmissionService SubmissionService



@if (!_isAuthenticated)
{
    <div class="alert alert-warning">
        Please <a href="/login">login</a> to view your orders.
    </div>
}
else if (!_isAdmin && !_isStudent)
{
    <div class="alert alert-danger">
        Bạn không có quyền truy cập trang này.
    </div>
}
else
{
    <h3>Danh sách bài kiểm tra đã làm</h3>
    @if (_submission == null)
    {
        <p><em>Đang tải...</em></p>
    }
    else if (!_submission.Any())
    {
        <p><em>Không có bài kiểm tra nào.</em></p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Tên bài thi</th>
                <th>SubmissionId</th>
                <th>Người thi</th>
                <th>Thao tác</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var submission in _submission)
            {
                <tr>
                    <td>@submission.Title</td>
                    <td>@submission.SubmissionId</td>
                    <td>@submission.UserId</td>
                    <td>
                        @if (_isStudent)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => NavigateToView(submission.SubmissionId)" title="Chi tiết bài làm">
                                Chi tiết bài làm
                            </button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>   
    }
}

@code {
    private bool _isAdmin;
    private bool _isStudent;
    private List<SubmissionDto>? _submission;
    private bool _isAuthenticated;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _isAdmin = await AuthService.IsAdmin();
        _isStudent = await AuthService.IsStudent();
        _isAuthenticated = await AuthService.IsAuthenticated();

        if (!_isAdmin && !_isStudent)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var submissions = await SubmissionService.GetAllSubmissionByUserIdAsync();
        _submission = submissions?.ToList();
    }
    
    private void NavigateToView(int id)
    {
        NavigationManager.NavigateTo($"/submission/view/{id}");
    }
}