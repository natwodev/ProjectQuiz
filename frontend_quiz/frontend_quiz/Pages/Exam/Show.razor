@page "/exam/view/{id:int}"
@using frontend_quiz.DTOs
@using frontend_quiz.Services
@inject ExamService ExamService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject QuestionService questionService

@if (!_isAuthenticated)
{
    <div class="alert alert-warning">
        Vui lòng <a href="/login">đăng nhập</a> để xem nội dung bài kiểm tra.
    </div>
}
else if (!_isAdmin)
{
    <div class="alert alert-danger">
        Bạn không có quyền truy cập trang này.
    </div>
}
else
{
    <h3>Chi tiết bài kiểm tra</h3>
    <button class="btn btn-secondary mb-3" @onclick="GoBackToExams">
        ← Quay lại danh sách
    </button>
    @if (!string.IsNullOrEmpty(_message))
    {
        <div class="alert alert-info mt-3">@_message</div>
    }
    <hr />
    <h4>Thêm câu hỏi mới</h4>
    <EditForm Model="_question" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nội dung câu hỏi <span class="text-danger">*</span></label>
            <InputTextArea class="form-control" @bind-Value="_question.Content" placeholder="Nhập nội dung câu hỏi..." />
            <ValidationMessage For="@(() => _question.Content)" />
        </div>

        <h5>Danh sách câu trả lời</h5>
        @foreach (var answer in _question.Answers)
        {
            var index = _question.Answers.IndexOf(answer);
            <div class="mb-2 d-flex align-items-start">
                <InputText class="form-control me-2" 
                           @bind-Value="_question.Answers[index].Content" 
                           placeholder="Nhập câu trả lời..." />
                
                <input type="radio" 
                       name="correctAnswer" 
                       class="form-check-input mt-2 me-2"
                       checked="@_question.Answers[index].IsCorrect"
                       @onchange="@(() => MarkAsCorrect(index))" />

                <label class="form-check-label mt-2 me-2">Đúng</label>

                <button type="button" 
                        class="btn btn-danger btn-sm mt-1" 
                        @onclick="@(() => RemoveAnswer(index))">X</button>
            </div>
            <ValidationMessage For="@(() => _question.Answers[index].Content)" />
        }

        <button type="button" class="btn btn-secondary mt-2" @onclick="AddAnswer">+ Thêm câu trả lời</button>

        <br /><br />
        <button type="submit" class="btn btn-primary">Tạo câu hỏi</button>
    </EditForm>

    @if (_exam == null)
    {
        <p><em>Đang tải dữ liệu...</em></p>
    }
    else
    {
        <div class="card my-3">
            <div class="card-body">
                <h4>@_exam.Title</h4>
                <p><strong>Người tạo:</strong> @_exam.UserId</p>
            </div>
        </div>

        @if (_exam.Questions != null && _exam.Questions.Any())
        {
            int questionNumber = 1;
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Danh sách câu hỏi</h5>
                    <div class="list-group">
                        @foreach (var question in _exam.Questions)
                        {
                            <div class="list-group-item">
                                <h6 class="mb-1">Câu @questionNumber: @question.Content</h6>
                                <small class="text-muted">
                                    @foreach (var item in question.Answers.Select((answer, index) => new { answer, index }))
                                    {
                                        var letter = (char)('a' + item.index);
                                        <div>
                                            <strong>@letter)</strong> @item.answer.Content
                                            @if (item.answer.IsCorrect)
                                            {
                                                <span class="text-success fw-bold"> ✔</span>
                                            }
                                        </div>
                                    }
                                </small>
                            </div>
                            questionNumber++;
                            <button @onclick="() => AskDelete(question.Id)" class="btn btn-danger">Xoá</button>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <p><em>Không có câu hỏi nào trong bài kiểm tra này.</em></p>
        }
    }
}

@if (_showConfirmDialog)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận xoá</h5>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn xoá câu hỏi này?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Huỷ</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Xoá</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public int id { get; set; }

    private ExamDto? _exam;
    private bool _isAdmin;
    private bool _isAuthenticated;
    private bool _showConfirmDialog = false;
    private int _questionIdToDelete;

    private void AskDelete(int questionId)
    {
        _questionIdToDelete = questionId;
        _showConfirmDialog = true;
    }

    private async Task ConfirmDelete()
    {
        await DeleteQuestion(_questionIdToDelete);
        _showConfirmDialog = false;
    }

    private void CancelDelete()
    {
        _showConfirmDialog = false;
    }

    private CreateQuestionDto _question = new()
    {
        Content = "",
        Answers = new List<CreateAnswerDto> { new CreateAnswerDto() }
    };

    private string? _message;

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(_question.Content))
        {
            _message = "Vui lòng nhập nội dung câu hỏi!";
            return;
        }

        if (_question.Answers.Count < 2)
        {
            _message = "Phải có ít nhất 2 câu trả lời.";
            return;
        }

        if (!_question.Answers.Any(a => a.IsCorrect))
        {
            _message = "Phải chọn ít nhất 1 câu trả lời đúng.";
            return;
        }

        if (_question.Answers.Any(a => string.IsNullOrWhiteSpace(a.Content)))
        {
            _message = "Vui lòng nhập nội dung cho tất cả các câu trả lời!";
            return;
        }

        var response = await questionService.CreateQuestionAsync(id, _question);
        if (response.IsSuccessStatusCode)
        {
            _message = "Tạo câu hỏi thành công!";
            _question = new CreateQuestionDto
            {
                Content = "",
                Answers = new List<CreateAnswerDto> { new CreateAnswerDto() }
            };
            _exam = await ExamService.GetExamByIdAsync(id); 
        }
        else
        {
            _message = "Đã xảy ra lỗi khi tạo câu hỏi.";
        }
    }

    private void AddAnswer()
    {
        _question.Answers.Add(new CreateAnswerDto());
    }

    private void RemoveAnswer(int index)
    {
        if (_question.Answers.Count > 1)
        {
            _question.Answers.RemoveAt(index);
        }
    }

    private void GoBackToExams()
    {
        NavigationManager.NavigateTo("/exams");
    }

    private void MarkAsCorrect(int selectedIndex)
    {
        for (int i = 0; i < _question.Answers.Count; i++)
        {
            _question.Answers[i].IsCorrect = (i == selectedIndex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AuthService.IsAuthenticated();
        _isAdmin = await AuthService.IsAdmin();

        if (!_isAuthenticated)
        {
            return;
        }

        if (!_isAdmin)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _exam = await ExamService.GetExamByIdAsync(id);
    }

    private async Task DeleteQuestion(int questionId)
    {
        var result = await questionService.DeleteQuestionAsync(questionId);
        if (result)
        {
            _message = "Đã xoá câu hỏi thành công!";
            _exam = await ExamService.GetExamByIdAsync(id); // cập nhật lại danh sách câu hỏi
        }
        else
        {
            _message = "Không thể xoá câu hỏi. Có thể câu hỏi không tồn tại.";
        }
    }

}
