@page "/exams"
@using frontend_quiz.DTOs
@using frontend_quiz.Services
@inject ExamService ExamService
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject SubmissionService SubmissionService
@if (!_isAuthenticated)
{
    <div class="alert alert-warning">
        Please <a href="/login">login</a> to view your orders.
    </div>
}
else if (!_isAdmin && !_isStudent)
{
    <div class="alert alert-danger">
        Bạn không có quyền truy cập trang này.
    </div>
}
else
{
    <h3>Danh sách bài kiểm tra</h3>
    @if (_isAdmin)
    {
        <button class="btn btn-secondary mb-3" @onclick="GoToCreateExams">
            Tạo bài kiểm tra
        </button>
    }
    @if (_exams == null)
    {
        <p><em>Đang tải...</em></p>
    }
    else if (!_exams.Any())
    {
        <p><em>Không có bài kiểm tra nào.</em></p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>ID</th>
                <th>Tiêu đề</th>
                <th>Người tạo</th>
                <th>Thao tác</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var exam in _exams)
            {
                <tr>
                    <td>@exam.ExamId</td>
                    <td>@exam.Title</td>
                    <td>@exam.UserId</td>
                    <td>
                        @if (_isAdmin)
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => NavigateToView(exam.ExamId)" title="Xem chi tiết">
                                Xem chi tiết
                            </button>
                        }
                        @if (_isStudent)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => HandleValidSubmit(exam.ExamId)" title="Làm bài">
                                Làm bài kiểm tra
                            </button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">@_errorMessage</div>
}

@code {
    private bool _isAdmin;
    private bool _isStudent;
    private List<ExamDto>? _exams;
    private bool _isAuthenticated;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _isAdmin = await AuthService.IsAdmin();
        _isStudent = await AuthService.IsStudent();
        _isAuthenticated = await AuthService.IsAuthenticated();

        if (!_isAdmin && !_isStudent)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var exams = await ExamService.GetAllExamsAsync();
        _exams = exams?.ToList();
    }
    private void GoToCreateExams()
    {
        NavigationManager.NavigateTo("/CreateExam");
    }
    private void NavigateToView(int id)
    {
        NavigationManager.NavigateTo($"/exam/view/{id}");
    }

    private async Task HandleValidSubmit(int id)
    {

        try
        {
            var response = await SubmissionService.CreateSubmissionAsync(id);
            if (response.IsSuccessStatusCode)
            {
                var createdSubmission = await response.Content.ReadFromJsonAsync<SubmissionDto>();
                if (createdSubmission != null)
                {
                    NavigationManager.NavigateTo($"/submission/view/{createdSubmission.SubmissionId}");
                }
                else
                {
                    _errorMessage = "Tạo bài kiểm tra thành công nhưng không đọc được thông tin.";
                }
            }
            else
            {
                _errorMessage = "Tạo bài kiểm tra thất bại.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Lỗi: {ex.Message}";
        }
    }

    
}