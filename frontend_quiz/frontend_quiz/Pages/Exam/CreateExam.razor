@page "/CreateExam"
@using frontend_quiz.DTOs
@using frontend_quiz.Services
@inject ExamService ExamService
@inject NavigationManager NavigationManager

<h3>Tạo bài kiểm tra mới</h3>

<EditForm Model="_newExam" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Tiêu đề</label>
        <InputText id="title" class="form-control" @bind-Value="_newExam.Title" />
    </div>

    <button type="submit" class="btn btn-primary">Tạo</button>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">@_errorMessage</div>
}

@code {
    private CreateExamDto _newExam = new();
    private string? _errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await ExamService.CreateExamAsync(_newExam);
            if (response.IsSuccessStatusCode)
            {
                // Đọc kết quả ExamDto từ response nếu backend trả về JSON
                var createdExam = await response.Content.ReadFromJsonAsync<ExamDto>();
                if (createdExam != null)
                {
                    NavigationManager.NavigateTo($"/exam/view/{createdExam.ExamId}");
                }
                else
                {
                    _errorMessage = "Tạo bài kiểm tra thành công nhưng không đọc được thông tin.";
                }
            }
            else
            {
                _errorMessage = "Tạo bài kiểm tra thất bại.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Lỗi: {ex.Message}";
        }
    }
}